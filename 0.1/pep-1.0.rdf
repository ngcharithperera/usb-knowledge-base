<rdf:RDF
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
    xmlns:pep="https://w3id.org/pep/"
    xmlns:vs="http://www.w3.org/2003/06/sw-vocab-status/ns#"
    xmlns:voaf="http://purl.org/vocommons/voaf#"
    xmlns:ssn="http://purl.oclc.org/NET/ssnx/ssn#"
    xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
    xmlns:rdfp="https://w3id.org/rdfp/"
    xmlns:dul="http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#"
    xmlns:dcterms="http://purl.org/dc/terms/"
    xmlns:owl="http://www.w3.org/2002/07/owl#"
    xmlns:skos="http://www.w3.org/2004/02/skos/core#"
    xmlns:vann="http://purl.org/vocab/vann/"
    xmlns:foaf="http://xmlns.com/foaf/0.1/"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema#">
  <owl:Ontology rdf:about="">
    <vann:preferredNamespacePrefix>pep</vann:preferredNamespacePrefix>
    <owl:versionInfo>v1.0</owl:versionInfo>
    <vann:preferredNamespaceUri rdf:resource=""/>
    <rdf:type rdf:resource="http://purl.org/vocommons/voaf#Vocabulary"/>
    <dcterms:title xml:lang="en">Process Execution ontology.</dcterms:title>
    <dcterms:license rdf:resource="https://www.apache.org/licenses/LICENSE-2.0"/>
    <dcterms:modified rdf:datatype="http://www.w3.org/2001/XMLSchema#date"
    >2016-09-12</dcterms:modified>
    <rdf:type rdf:resource="http://xmlns.com/foaf/0.1/Document"/>
    <dcterms:description xml:lang="en">The process execution ontology is a proposal for a simple extension of both the [W3C Semantic Sensor Network](https://www.w3.org/TR/vocab-ssn/) and the [Semantic Actuator Network](https://www.irit.fr/recherches/MELODI/ontologies/SAN.owl) ontology cores. 

SSN describe `ssn:Sensor`s that implement `ssn:Sensing` methods and generate `ssn:Observation`s, which are (soon to be) activities.

In parallel to this, SAN describes `san:Actuator`s that implement `san:Acting` methods and generate `ssn:Actuation` activities.

In this ontology, we want to generalize these two parallel conceptual models, and account for a third use case: *Web services exposed on the web may trigger the execution of some processes*. 

We hence propose the following core concepts for the Process Execution ontology:

&gt; `pep:ProcessExecutor`s implement `pep:Process` methods, and generate `pep:ProcessExecution`s activities.

_Note: we call for comments and suggestions about the naming of these concepts [in this project open issue](https://github.com/thesmartenergy/pep/issues/1)_

As sensing and acting methods in SSN and SAN, processes may describe the necessary inputs and outputs. This is represented using properties `pep:hasInput` and `pep:hasOutput`. These properties may also be used to describe the actual input and output of a specific process execution.

Figure below overviews the PEP ontology, and illustrates it with an example.

[![Overview of the PEP Ontology](https://w3id.org/pep/pep.png)](https://w3id.org/pep/pep.png).

Additional documents describe alignments with other existing ontologies:

- [the Semantic Sensor Network ontology](https://w3id.org/pep/SSNAlignment-0.9);
- [the RDF Presentation ontology](https://w3id.org/pep/RDFPAlignment-0.9).

## Process Execution Platform

[Process execution platforms](https://w3id.org/pep/platform.html) expose process executors on the Web in a RESTful way.

</dcterms:description>
    <owl:versionIRI rdf:resource="pep-1.0"/>
    <dcterms:issued rdf:datatype="http://www.w3.org/2001/XMLSchema#date"
    >2016-07-01</dcterms:issued>
    <dcterms:creator rdf:resource="http://www.maxime-lefrancois.info/me#"/>
  </owl:Ontology>
  <owl:Class rdf:about="ProcessExecutionContainer">
    <rdfs:isDefinedBy rdf:resource=""/>
    <vs:term_status>stable</vs:term_status>
    <rdfs:comment xml:lang="en">The class of Process Executor Containers. They are Web container of Process Execution ressources, where one may operate HTTP POST requests to execute a given process.</rdfs:comment>
    <rdfs:label>Process Execution Container</rdfs:label>
  </owl:Class>
  <owl:Class rdf:about="ProcessExecutor">
    <rdfs:isDefinedBy rdf:resource=""/>
    <vs:term_status>stable</vs:term_status>
    <owl:disjointWith>
      <owl:Class rdf:about="Process"/>
    </owl:disjointWith>
    <rdfs:comment xml:lang="en">A Process Executor can execute (implement) processes. A Process Executor may be a physical device, a computational method, a web service, a laboratory setup with a person following a method, or any other thing that can follow a Process. This concept generalizes ssn:Sensor, which in the latest version of the SSN ontology is a subclass of dul:Object. A dul:Object is any physical, social, or mental object, or a substance.

Prototypical process executors are Sensor, Actuator, Estimator.

Links to ProcessExecution describe the Executions made.

Links to Processes define how the executor can make Executions (it may implement several Processes). A Process Executor implements each of the methods used by the Executions it made. 

Other metadata may detail geolocation, vendor, operator, consumed power, etc.</rdfs:comment>
    <rdfs:label>Process Executor</rdfs:label>
  </owl:Class>
  <owl:Class rdf:about="ProcessExecution">
    <rdfs:isDefinedBy rdf:resource=""/>
    <vs:term_status>stable</vs:term_status>
    <owl:disjointWith rdf:resource="ProcessExecutor"/>
    <owl:disjointWith>
      <owl:Class rdf:about="Process"/>
    </owl:disjointWith>
    <rdfs:comment xml:lang="en">A process execution is the execution activity that is led by the Process Executor. This concept generalizes ssn:Observation, which describes an activity in the newest versoin of the SSN ontology and is hence now aligned with the O&amp;M concept of Observation.

A process execution links to:

- the process executor it is associated to;
- the process method used;
- the input and the output of the process execution.
</rdfs:comment>
    <rdfs:label>Process Execution</rdfs:label>
  </owl:Class>
  <owl:Class rdf:about="Process">
    <rdfs:isDefinedBy rdf:resource=""/>
    <vs:term_status>stable</vs:term_status>
    <rdfs:comment xml:lang="en">The description of a process. A process generalizes the concept of `ssn:Sensing` in the SSN ontology, and of `san:Acting` in the SAN ontology. Examples of processes include sensing, acting, planning, or forecasting.

In the first version of the SSN ontology, `ssn:Process` was a subclass of `dul:Method`.

A `dul:Method` is a Description that defines or uses concepts in order to guide carrying out actions aimed at a solution with respect to a problem. It is different from a Plan, because plans could be carried out in order to follow a method, but a method can be followed by executing alternative plans.</rdfs:comment>
    <rdfs:label xml:lang="en">Process</rdfs:label>
  </owl:Class>
  <owl:ObjectProperty rdf:about="implements">
    <rdfs:isDefinedBy rdf:resource=""/>
    <vs:term_status>stable</vs:term_status>
    <owl:propertyChainAxiom rdf:parseType="Collection">
      <owl:ObjectProperty rdf:about="processExecutionContainer"/>
      <owl:ObjectProperty rdf:about="forProcess"/>
    </owl:propertyChainAxiom>
    <owl:propertyChainAxiom rdf:parseType="Collection">
      <owl:ObjectProperty rdf:about="executed"/>
      <owl:FunctionalProperty rdf:about="methodUsed"/>
    </owl:propertyChainAxiom>
    <rdfs:range rdf:resource="Process"/>
    <rdfs:domain rdf:resource="ProcessExecutor"/>
    <rdfs:comment xml:lang="en">A relation between an Process Executor and a method it implements. This concept generalizes `ssn:implements`, which in the first version of the SSN ontology is a subproperty of `dul:isDescribedBy`.

`dul:isDescribedBy` is the relation between an Entity and a Description. A Description gives a unity to a Collection of parts (the components), or constituents, by assigning a Role to each of them in the context of a whole Object (the system).</rdfs:comment>
    <rdfs:label>implements</rdfs:label>
  </owl:ObjectProperty>
  <owl:ObjectProperty rdf:about="executed">
    <rdfs:isDefinedBy rdf:resource=""/>
    <owl:inverseOf>
      <owl:FunctionalProperty rdf:about="executedBy"/>
    </owl:inverseOf>
    <rdfs:range rdf:resource="ProcessExecution"/>
    <rdfs:domain rdf:resource="ProcessExecutor"/>
    <vs:term_status>stable</vs:term_status>
    <rdfs:comment xml:lang="en">Relationship between a process executor and an execution it was assigned to.</rdfs:comment>
    <rdfs:label>executed</rdfs:label>
  </owl:ObjectProperty>
  <owl:ObjectProperty rdf:about="executor">
    <rdfs:isDefinedBy rdf:resource=""/>
    <rdfs:range rdf:resource="ProcessExecutor"/>
    <rdfs:domain rdf:resource="ProcessExecutionContainer"/>
    <vs:term_status>stable</vs:term_status>
    <rdfs:comment xml:lang="en">Relationship between a process execution container and the process executor that controls it.</rdfs:comment>
    <rdfs:label>executor</rdfs:label>
  </owl:ObjectProperty>
  <owl:ObjectProperty rdf:about="processExecutionContainer">
    <rdfs:isDefinedBy rdf:resource=""/>
    <vs:term_status>stable</vs:term_status>
    <rdfs:range rdf:resource="ProcessExecutionContainer"/>
    <rdfs:domain rdf:resource="ProcessExecutor"/>
    <rdfs:comment xml:lang="en">Links a Process Executor to a Web container of Process Execution ressources, where one may operate HTTP POST requests to execute the process.</rdfs:comment>
    <rdfs:label>process execution container</rdfs:label>
  </owl:ObjectProperty>
  <owl:ObjectProperty rdf:about="forProcess">
    <rdfs:isDefinedBy rdf:resource=""/>
    <vs:term_status>stable</vs:term_status>
    <rdfs:range rdf:resource="Process"/>
    <rdfs:domain rdf:resource="ProcessExecutionContainer"/>
    <rdfs:comment xml:lang="en">Links a Process Execution Container to the Process that is executed when one operate a create operation request to it.</rdfs:comment>
    <rdfs:label>for process</rdfs:label>
  </owl:ObjectProperty>
  <owl:FunctionalProperty rdf:about="hasOutput">
    <rdfs:isDefinedBy rdf:resource=""/>
    <vs:term_status>stable</vs:term_status>
    <rdfs:comment xml:lang="en">Links a process, process executor, or process execution, to some description of their output.

Intuitively:

- the output description of some process executor specializes the output description of the process it implements;
- the output description of some process execution specializes both the output description of the process executor that executed it, and of the process  method used.

</rdfs:comment>
    <rdfs:label>has output</rdfs:label>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#ObjectProperty"/>
  </owl:FunctionalProperty>
  <owl:FunctionalProperty rdf:about="executedBy">
    <rdfs:isDefinedBy rdf:resource=""/>
    <owl:inverseOf rdf:resource="executed"/>
    <rdfs:range rdf:resource="ProcessExecutor"/>
    <rdfs:domain rdf:resource="ProcessExecution"/>
    <vs:term_status>stable</vs:term_status>
    <rdfs:comment xml:lang="en">Relationship between an execution and the agent that made it. This concept generalizes `ssn:observedBy`, which in the first version of the SSN ontology is a sub property of `dul:includesObject`. 

`dul:includesObject` is a relation between situations and objects, e.g. 'this morning I've prepared my coffee and had my fingers burnt' (i.e.: the preparation of my coffee this morning included me).</rdfs:comment>
    <rdfs:label>executed by</rdfs:label>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#ObjectProperty"/>
  </owl:FunctionalProperty>
  <owl:FunctionalProperty rdf:about="methodUsed">
    <rdfs:isDefinedBy rdf:resource=""/>
    <vs:term_status>stable</vs:term_status>
    <rdfs:range rdf:resource="Process"/>
    <rdfs:domain rdf:resource="ProcessExecution"/>
    <rdfs:comment xml:lang="en">Relation between a ProcessExecution and the Process it executes. This concept generalizes `ssn:sensingMethodUsed`, which in the first version of the SSN ontology is a sub property of `dul:satisfies`. 

  `dul:satisfies` is a relation between a Situation and a Description, e.g. the execution of a Plan satisfies that plan.</rdfs:comment>
    <rdfs:label>method used</rdfs:label>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#ObjectProperty"/>
  </owl:FunctionalProperty>
  <owl:FunctionalProperty rdf:about="hasInput">
    <rdfs:isDefinedBy rdf:resource=""/>
    <vs:term_status>stable</vs:term_status>
    <rdfs:comment xml:lang="en">Links a process, process executor, or process execution, to some description of their input.

Intuitively:

- the input description of some process executor specializes the input description of the process it implements;
- the input description of some process execution specializes both the input description of the process executor that executed it, and of the process  method used.

</rdfs:comment>
    <rdfs:label>has input</rdfs:label>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#ObjectProperty"/>
  </owl:FunctionalProperty>
</rdf:RDF>
